// <auto-generated />
using System;
using Journey.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Journey.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Journey.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountName")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountName = "Igor",
                            CreatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(6098),
                            Password = "pass",
                            Role = 0,
                            UpdatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(6133)
                        },
                        new
                        {
                            Id = 2,
                            AccountName = "Sasha",
                            CreatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(6138),
                            Password = "pass",
                            Role = 0,
                            UpdatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(6139)
                        },
                        new
                        {
                            Id = 3,
                            AccountName = "Roma",
                            CreatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(6141),
                            Password = "pass",
                            Role = 1,
                            UpdatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(6143)
                        });
                });

            modelBuilder.Entity("Journey.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PlaceName")
                        .IsUnique();

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 3,
                            CreatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(6238),
                            Description = "Maiores quis ipsam et.",
                            PlaceName = "Apartment on Kamyanetskaya street",
                            UpdatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(6241)
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 3,
                            CreatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(6945),
                            Description = "Iste ad rem saepe asperiores inventore.",
                            PlaceName = "Avto Spa",
                            UpdatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(6950)
                        });
                });

            modelBuilder.Entity("Journey.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArrived")
                        .HasColumnType("bit");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            ArrivalDate = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7507),
                            CreatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7501),
                            DepartureDate = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7509),
                            IsArrived = false,
                            PlaceId = 1,
                            UpdatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7505)
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            ArrivalDate = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7514),
                            CreatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7511),
                            DepartureDate = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7515),
                            IsArrived = false,
                            PlaceId = 1,
                            UpdatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7512)
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 2,
                            ArrivalDate = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7520),
                            CreatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7517),
                            DepartureDate = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7522),
                            IsArrived = false,
                            PlaceId = 2,
                            UpdatedAt = new DateTime(2022, 5, 19, 18, 44, 5, 501, DateTimeKind.Local).AddTicks(7519)
                        });
                });

            modelBuilder.Entity("Journey.Entities.Place", b =>
                {
                    b.HasOne("Journey.Entities.Account", "Account")
                        .WithMany("Places")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Journey.Entities.Reservation", b =>
                {
                    b.HasOne("Journey.Entities.Account", "Account")
                        .WithMany("Reservations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Journey.Entities.Place", "Place")
                        .WithMany("Reservations")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Journey.Entities.Account", b =>
                {
                    b.Navigation("Places");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Journey.Entities.Place", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
